---
#################################################################
# TODO: There are some open source Ansible playbooks/methods/etc. for
# dealing with WordPress. It is particularly challenging that WordPress needs
# to be 'installed' by the user by submitting the usual '5 Minute Install'
# form, that is, HTML form via HTTP... But maybe the options that WordPress
# expects from that form submission can also somehow be supplied via
# Ansible parameters... This would solve a lot of problems!
#################################################################

- name: Download Wordpress
  unarchive:
    src: "https://wordpress.org/wordpress-{{ wordpress_version }}.tar.gz"
    dest: "/var/www/html/"
    remote_src: yes

- name: Create WordPress database
  community.mysql.mysql_db:
    name: "{{ database_name }}"
    state: present
    login_unix_socket: /run/mysqld/mysqld.sock

- name: Copy wp-config-sample.php to wp-config.php
  copy:
    remote_src: True
    src: /var/www/html/wordpress/wp-config-sample.php
    dest: /var/www/html/wordpress/wp-config.php

- name: Delete old file wp-config-sample.php
  file:
    path: /var/www/html/wordpress/wp-config-sample.php
    state: absent

- name: Provide database configurations
  lineinfile:
    path: /var/www/html/wordpress/wp-config.php
    search_string: "'{{ item.db_var_name }}'"
    line: "define( '{{ item.db_var_name }}', '{{ item.db_var_value }}' );"
  loop:
    - { db_var_name: 'DB_NAME', db_var_value: '{{ database_name }}' }
    - { db_var_name: 'DB_USER', db_var_value: '{{ database_username }}' }
    - { db_var_name: 'DB_PASSWORD', db_var_value: '{{ database_password }}' }
    - { db_var_name: 'DB_HOST', db_var_value: '{{ database_host }}' }
    # TODO: Add these also in the future.
    # - { db_var_name: 'DB_CHARSET', db_var_value: '{{ database_charset }}' }
    # - { db_var_name: 'DB_COLLATE', db_var_value: '{{ database_collation }}' }
- name: Provide database table prefix
  lineinfile:
    path: /var/www/html/wordpress/wp-config.php
    search_string: "table_prefix"
    line: "$table_prefix = '{{ database_table_prefix }}';"

# TODO: Some optional flag to skip this, so that we can rerun a WordPress play
# on some production environment without logging everybody out.
- name: Provide authentication values
  lineinfile:
    path: /var/www/html/wordpress/wp-config.php
    search_string: "'{{ item.key }}'"
    line: "define( '{{ item.key }}', '{{ item.value }}' );"
  loop: "{{ wordpress_auth_vars | dict2items }}"

- name: Set WordPress constant FS_METHOD to 'direct' to allow theme and plugin installation.
  lineinfile:
    path: /var/www/html/wordpress/wp-config.php
    line: "define( 'FS_METHOD', 'direct' );"
    insertbefore: "/* That's all, stop editing!"

- name: Set file ownership for wp-content/
  file:
    path: /var/www/html/wordpress/wp-content/
    state: directory
    recurse: yes
    owner: www-data
    group: www-data

- name: Block the insecure endpoint xmlrpc.php
  template:
    src: .htaccess
    dest: /var/www/html/wordpress/.htaccess
    # TODO: Maybe this is not secure...
    owner: www-data
    group: www-data
    mode: '0644'
  when: not wordpress_insecure_allow_xmlrpc

- name: Restart Apache
  service:
    name: apache2
    state: reloaded
